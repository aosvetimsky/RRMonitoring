// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RRMonitoring.Colocation.Infrastructure.Database;

#nullable disable

namespace RRMonitoring.Colocation.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ColocationContext))]
    [Migration("20250505194602_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Container", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uuid")
                        .HasColumnName("facility_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<byte>("SocketTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("socket_type_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_container");

                    b.HasIndex("FacilityId")
                        .HasDatabaseName("ix_container_facility_id");

                    b.HasIndex("SocketTypeId")
                        .HasDatabaseName("ix_container_socket_type_id");

                    b.ToTable("container", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("DeputyManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("deputy_manager_id");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PowerCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("power_capacity");

                    b.Property<string>("Subnet")
                        .HasColumnType("text")
                        .HasColumnName("subnet");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_facility");

                    b.ToTable("facility", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.FacilityTechnician", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("uuid")
                        .HasColumnName("facility_id");

                    b.HasKey("UserId", "FacilityId")
                        .HasName("pk_facility_technician");

                    b.HasIndex("FacilityId")
                        .HasDatabaseName("ix_facility_technician_facility_id");

                    b.ToTable("facility_technician", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid?>("EquipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("equipment_id");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<Guid>("ShelfId")
                        .HasColumnType("uuid")
                        .HasColumnName("shelf_id");

                    b.Property<byte>("SocketTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("socket_type_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_place");

                    b.HasIndex("ShelfId")
                        .HasDatabaseName("ix_place_shelf_id");

                    b.HasIndex("SocketTypeId")
                        .HasDatabaseName("ix_place_socket_type_id");

                    b.ToTable("place", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Rack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContainerId")
                        .HasColumnType("uuid")
                        .HasColumnName("container_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<byte>("SocketTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("socket_type_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_rack");

                    b.HasIndex("ContainerId")
                        .HasDatabaseName("ix_rack_container_id");

                    b.HasIndex("SocketTypeId")
                        .HasDatabaseName("ix_rack_socket_type_id");

                    b.ToTable("rack", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Shelf", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<Guid>("RackId")
                        .HasColumnType("uuid")
                        .HasColumnName("rack_id");

                    b.Property<byte>("SocketTypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("socket_type_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_shelf");

                    b.HasIndex("RackId")
                        .HasDatabaseName("ix_shelf_rack_id");

                    b.HasIndex("SocketTypeId")
                        .HasDatabaseName("ix_shelf_socket_type_id");

                    b.ToTable("shelf", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.SocketType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_socket_type");

                    b.ToTable("socket_type", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "C13",
                            Name = "C13"
                        },
                        new
                        {
                            Id = (byte)2,
                            Code = "C19",
                            Name = "C19"
                        },
                        new
                        {
                            Id = (byte)3,
                            Code = "PDU",
                            Name = "PDU"
                        },
                        new
                        {
                            Id = (byte)4,
                            Code = "EuroPDU",
                            Name = "EuroPDU"
                        });
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Container", b =>
                {
                    b.HasOne("RRMonitoring.Colocation.Domain.Entities.Facility", "Facility")
                        .WithMany("Containers")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_container_facility_facility_id");

                    b.HasOne("RRMonitoring.Colocation.Domain.Entities.SocketType", "SocketType")
                        .WithMany()
                        .HasForeignKey("SocketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_container_socket_type_socket_type_id");

                    b.Navigation("Facility");

                    b.Navigation("SocketType");
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.FacilityTechnician", b =>
                {
                    b.HasOne("RRMonitoring.Colocation.Domain.Entities.Facility", "Facility")
                        .WithMany("Technicians")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_facility_technician_facility_facility_id");

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Place", b =>
                {
                    b.HasOne("RRMonitoring.Colocation.Domain.Entities.Shelf", "Shelf")
                        .WithMany("Places")
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_place_shelf_shelf_id");

                    b.HasOne("RRMonitoring.Colocation.Domain.Entities.SocketType", "SocketType")
                        .WithMany()
                        .HasForeignKey("SocketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_place_socket_type_socket_type_id");

                    b.Navigation("Shelf");

                    b.Navigation("SocketType");
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Rack", b =>
                {
                    b.HasOne("RRMonitoring.Colocation.Domain.Entities.Container", "Container")
                        .WithMany("Racks")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_rack_container_container_id");

                    b.HasOne("RRMonitoring.Colocation.Domain.Entities.SocketType", "SocketType")
                        .WithMany()
                        .HasForeignKey("SocketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_rack_socket_type_socket_type_id");

                    b.Navigation("Container");

                    b.Navigation("SocketType");
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Shelf", b =>
                {
                    b.HasOne("RRMonitoring.Colocation.Domain.Entities.Rack", "Rack")
                        .WithMany("Shelves")
                        .HasForeignKey("RackId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_shelf_rack_rack_id");

                    b.HasOne("RRMonitoring.Colocation.Domain.Entities.SocketType", "SocketType")
                        .WithMany()
                        .HasForeignKey("SocketTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_shelf_socket_type_socket_type_id");

                    b.Navigation("Rack");

                    b.Navigation("SocketType");
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Container", b =>
                {
                    b.Navigation("Racks");
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Facility", b =>
                {
                    b.Navigation("Containers");

                    b.Navigation("Technicians");
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Rack", b =>
                {
                    b.Navigation("Shelves");
                });

            modelBuilder.Entity("RRMonitoring.Colocation.Domain.Entities.Shelf", b =>
                {
                    b.Navigation("Places");
                });
#pragma warning restore 612, 618
        }
    }
}
