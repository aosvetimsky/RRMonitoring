// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RRMonitoring.Identity.Infrastructure.Database;

#nullable disable

namespace RRMonitoring.Identity.Infrastructure.Database.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20241215104238_ChangeUserFirstNameMaxLength")]
    partial class ChangeUserFirstNameMaxLength
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AllowedAccessTokenSigningAlgorithms")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("allowed_access_token_signing_algorithms");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_accessed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("boolean")
                        .HasColumnName("non_editable");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("boolean")
                        .HasColumnName("show_in_discovery_document");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_api_resource");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_api_resource_name");

                    b.ToTable("api_resource", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_api_resource_claim");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_api_resource_claim_api_resource_id");

                    b.ToTable("api_resource_claim", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_api_resource_property");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_api_resource_property_api_resource_id");

                    b.ToTable("api_resource_property", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("api_resource_id");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("scope");

                    b.HasKey("Id")
                        .HasName("pk_api_resource_scope");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_api_resource_scope_api_resource_id");

                    b.ToTable("api_resource_scope", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApiResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("api_resource_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_api_resource_secret");

                    b.HasIndex("ApiResourceId")
                        .HasDatabaseName("ix_api_resource_secret_api_resource_id");

                    b.ToTable("api_resource_secret", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("boolean")
                        .HasColumnName("emphasize");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("boolean")
                        .HasColumnName("show_in_discovery_document");

                    b.HasKey("Id")
                        .HasName("pk_api_scope");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_api_scope_name");

                    b.ToTable("api_scope", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ScopeId")
                        .HasColumnType("integer")
                        .HasColumnName("scope_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_api_scope_claim");

                    b.HasIndex("ScopeId")
                        .HasDatabaseName("ix_api_scope_claim_scope_id");

                    b.ToTable("api_scope_claim", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("key");

                    b.Property<int>("ScopeId")
                        .HasColumnType("integer")
                        .HasColumnName("scope_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_api_scope_property");

                    b.HasIndex("ScopeId")
                        .HasDatabaseName("ix_api_scope_property_scope_id");

                    b.ToTable("api_scope_property", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AbsoluteRefreshTokenLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("absolute_refresh_token_lifetime");

                    b.Property<int>("AccessTokenLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("access_token_lifetime");

                    b.Property<int>("AccessTokenType")
                        .HasColumnType("integer")
                        .HasColumnName("access_token_type");

                    b.Property<bool>("AllowAccessTokensViaBrowser")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_access_tokens_via_browser");

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_offline_access");

                    b.Property<bool>("AllowPlainTextPkce")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_plain_text_pkce");

                    b.Property<bool>("AllowRememberConsent")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_remember_consent");

                    b.Property<string>("AllowedIdentityTokenSigningAlgorithms")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("allowed_identity_token_signing_algorithms");

                    b.Property<bool>("AlwaysIncludeUserClaimsInIdToken")
                        .HasColumnType("boolean")
                        .HasColumnName("always_include_user_claims_in_id_token");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnType("boolean")
                        .HasColumnName("always_send_client_claims");

                    b.Property<int>("AuthorizationCodeLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("authorization_code_lifetime");

                    b.Property<bool>("BackChannelLogoutSessionRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("back_channel_logout_session_required");

                    b.Property<string>("BackChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("back_channel_logout_uri");

                    b.Property<string>("ClientClaimsPrefix")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_claims_prefix");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_id");

                    b.Property<string>("ClientName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientUri")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("client_uri");

                    b.Property<int?>("ConsentLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("consent_lifetime");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<int>("DeviceCodeLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("device_code_lifetime");

                    b.Property<bool>("EnableLocalLogin")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_local_login");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<bool>("FrontChannelLogoutSessionRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("front_channel_logout_session_required");

                    b.Property<string>("FrontChannelLogoutUri")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("front_channel_logout_uri");

                    b.Property<int>("IdentityTokenLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("identity_token_lifetime");

                    b.Property<bool>("IncludeJwtId")
                        .HasColumnType("boolean")
                        .HasColumnName("include_jwt_id");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_accessed");

                    b.Property<string>("LogoUri")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("logo_uri");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("boolean")
                        .HasColumnName("non_editable");

                    b.Property<string>("PairWiseSubjectSalt")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("pair_wise_subject_salt");

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("protocol_type");

                    b.Property<int>("RefreshTokenExpiration")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_token_expiration");

                    b.Property<int>("RefreshTokenUsage")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_token_usage");

                    b.Property<bool>("RequireClientSecret")
                        .HasColumnType("boolean")
                        .HasColumnName("require_client_secret");

                    b.Property<bool>("RequireConsent")
                        .HasColumnType("boolean")
                        .HasColumnName("require_consent");

                    b.Property<bool>("RequirePkce")
                        .HasColumnType("boolean")
                        .HasColumnName("require_pkce");

                    b.Property<bool>("RequireRequestObject")
                        .HasColumnType("boolean")
                        .HasColumnName("require_request_object");

                    b.Property<int>("SlidingRefreshTokenLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("sliding_refresh_token_lifetime");

                    b.Property<bool>("UpdateAccessTokenClaimsOnRefresh")
                        .HasColumnType("boolean")
                        .HasColumnName("update_access_token_claims_on_refresh");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("UserCodeType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_code_type");

                    b.Property<int?>("UserSsoLifetime")
                        .HasColumnType("integer")
                        .HasColumnName("user_sso_lifetime");

                    b.HasKey("Id")
                        .HasName("pk_client");

                    b.HasIndex("ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_client_client_id");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_client_claim");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_claim_client_id");

                    b.ToTable("client_claim", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("origin");

                    b.HasKey("Id")
                        .HasName("pk_client_cors_origin");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_cors_origin_client_id");

                    b.ToTable("client_cors_origin", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("GrantType")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("grant_type");

                    b.HasKey("Id")
                        .HasName("pk_client_grant_type");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_grant_type_client_id");

                    b.ToTable("client_grant_type", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("provider");

                    b.HasKey("Id")
                        .HasName("pk_client_id_p_restriction");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_id_p_restriction_client_id");

                    b.ToTable("client_id_p_restriction", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("PostLogoutRedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("post_logout_redirect_uri");

                    b.HasKey("Id")
                        .HasName("pk_client_post_logout_redirect_uri");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_post_logout_redirect_uri_client_id");

                    b.ToTable("client_post_logout_redirect_uri", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_client_property");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_property_client_id");

                    b.ToTable("client_property", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("RedirectUri")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("redirect_uri");

                    b.HasKey("Id")
                        .HasName("pk_client_redirect_uri");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_redirect_uri_client_id");

                    b.ToTable("client_redirect_uri", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("scope");

                    b.HasKey("Id")
                        .HasName("pk_client_scope");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_scope_client_id");

                    b.ToTable("client_scope", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_client_secret");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_secret_client_id");

                    b.ToTable("client_secret", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("user_code");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("device_code");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subject_id");

                    b.HasKey("UserCode")
                        .HasName("pk_device_flow_code");

                    b.HasIndex("DeviceCode")
                        .IsUnique()
                        .HasDatabaseName("ix_device_flow_code_device_code");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_device_flow_code_expiration");

                    b.ToTable("device_flow_code", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("display_name");

                    b.Property<bool>("Emphasize")
                        .HasColumnType("boolean")
                        .HasColumnName("emphasize");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean")
                        .HasColumnName("enabled");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<bool>("NonEditable")
                        .HasColumnType("boolean")
                        .HasColumnName("non_editable");

                    b.Property<bool>("Required")
                        .HasColumnType("boolean")
                        .HasColumnName("required");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnType("boolean")
                        .HasColumnName("show_in_discovery_document");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_identity_resource");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_identity_resource_name");

                    b.ToTable("identity_resource", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("identity_resource_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_identity_resource_claim");

                    b.HasIndex("IdentityResourceId")
                        .HasDatabaseName("ix_identity_resource_claim_identity_resource_id");

                    b.ToTable("identity_resource_claim", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("IdentityResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("identity_resource_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_identity_resource_property");

                    b.HasIndex("IdentityResourceId")
                        .HasDatabaseName("ix_identity_resource_property_identity_resource_id");

                    b.ToTable("identity_resource_property", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("key");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("consumed_time");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_time");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("character varying(50000)")
                        .HasColumnName("data");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("session_id");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("subject_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.HasKey("Key")
                        .HasName("pk_persisted_grant");

                    b.HasIndex("Expiration")
                        .HasDatabaseName("ix_persisted_grant_expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type")
                        .HasDatabaseName("ix_persisted_grant_subject_id_client_id_type");

                    b.HasIndex("SubjectId", "SessionId", "Type")
                        .HasDatabaseName("ix_persisted_grant_subject_id_session_id_type");

                    b.ToTable("persisted_grant", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claim");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claim_role_id");

                    b.ToTable("role_claim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claim");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claim_user_id");

                    b.ToTable("user_claim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_login");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_login_user_id");

                    b.ToTable("user_login", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_token");

                    b.ToTable("user_token", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_account");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_account_name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_account_parent_id");

                    b.HasIndex("UserId", "ParentId")
                        .IsUnique()
                        .HasDatabaseName("ix_account_user_id_parent_id")
                        .HasFilter("parent_id IS NULL");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AC",
                            IsActive = true,
                            Name = "Остров Вознесения"
                        },
                        new
                        {
                            Id = 2,
                            Code = "AD",
                            IsActive = true,
                            Name = "Андорра"
                        },
                        new
                        {
                            Id = 3,
                            Code = "AE",
                            IsActive = true,
                            Name = "Объединённые Арабские Эмираты"
                        },
                        new
                        {
                            Id = 4,
                            Code = "AF",
                            IsActive = true,
                            Name = "Афганистан"
                        },
                        new
                        {
                            Id = 5,
                            Code = "AG",
                            IsActive = true,
                            Name = "Антигуа и Барбуда"
                        },
                        new
                        {
                            Id = 6,
                            Code = "AI",
                            IsActive = true,
                            Name = "Ангилья"
                        },
                        new
                        {
                            Id = 7,
                            Code = "AL",
                            IsActive = true,
                            Name = "Албания"
                        },
                        new
                        {
                            Id = 8,
                            Code = "AM",
                            IsActive = true,
                            Name = "Армения"
                        },
                        new
                        {
                            Id = 9,
                            Code = "AO",
                            IsActive = true,
                            Name = "Ангола"
                        },
                        new
                        {
                            Id = 10,
                            Code = "AR",
                            IsActive = true,
                            Name = "Аргентина"
                        },
                        new
                        {
                            Id = 11,
                            Code = "AS",
                            IsActive = true,
                            Name = "Американское Самоа"
                        },
                        new
                        {
                            Id = 12,
                            Code = "AT",
                            IsActive = true,
                            Name = "Австрия"
                        },
                        new
                        {
                            Id = 13,
                            Code = "AU",
                            IsActive = true,
                            Name = "Австралия"
                        },
                        new
                        {
                            Id = 14,
                            Code = "AW",
                            IsActive = true,
                            Name = "Аруба"
                        },
                        new
                        {
                            Id = 15,
                            Code = "AX",
                            IsActive = true,
                            Name = "Аландские острова"
                        },
                        new
                        {
                            Id = 16,
                            Code = "AZ",
                            IsActive = true,
                            Name = "Азербайджан"
                        },
                        new
                        {
                            Id = 17,
                            Code = "BA",
                            IsActive = true,
                            Name = "Босния и Герцеговина"
                        },
                        new
                        {
                            Id = 18,
                            Code = "BB",
                            IsActive = true,
                            Name = "Барбадос"
                        },
                        new
                        {
                            Id = 19,
                            Code = "BD",
                            IsActive = true,
                            Name = "Бангладеш"
                        },
                        new
                        {
                            Id = 20,
                            Code = "BE",
                            IsActive = true,
                            Name = "Бельгия"
                        },
                        new
                        {
                            Id = 21,
                            Code = "BF",
                            IsActive = true,
                            Name = "Буркина-Фасо"
                        },
                        new
                        {
                            Id = 22,
                            Code = "BG",
                            IsActive = true,
                            Name = "Болгария"
                        },
                        new
                        {
                            Id = 23,
                            Code = "BH",
                            IsActive = true,
                            Name = "Бахрейн"
                        },
                        new
                        {
                            Id = 24,
                            Code = "BI",
                            IsActive = true,
                            Name = "Бурунди"
                        },
                        new
                        {
                            Id = 25,
                            Code = "BJ",
                            IsActive = true,
                            Name = "Бенин"
                        },
                        new
                        {
                            Id = 26,
                            Code = "BL",
                            IsActive = true,
                            Name = "Сен-Бартелеми"
                        },
                        new
                        {
                            Id = 27,
                            Code = "BM",
                            IsActive = true,
                            Name = "Бермудские острова"
                        },
                        new
                        {
                            Id = 28,
                            Code = "BN",
                            IsActive = true,
                            Name = "Бруней"
                        },
                        new
                        {
                            Id = 29,
                            Code = "BO",
                            IsActive = true,
                            Name = "Боливия"
                        },
                        new
                        {
                            Id = 30,
                            Code = "BQ",
                            IsActive = true,
                            Name = "Бонэйр, Синт-Эстатиус и Саба"
                        },
                        new
                        {
                            Id = 31,
                            Code = "BR",
                            IsActive = true,
                            Name = "Бразилия"
                        },
                        new
                        {
                            Id = 32,
                            Code = "BS",
                            IsActive = true,
                            Name = "Багамы"
                        },
                        new
                        {
                            Id = 33,
                            Code = "BT",
                            IsActive = true,
                            Name = "Бутан"
                        },
                        new
                        {
                            Id = 34,
                            Code = "BW",
                            IsActive = true,
                            Name = "Ботсвана"
                        },
                        new
                        {
                            Id = 35,
                            Code = "BY",
                            IsActive = true,
                            Name = "Беларусь"
                        },
                        new
                        {
                            Id = 36,
                            Code = "BZ",
                            IsActive = true,
                            Name = "Белиз"
                        },
                        new
                        {
                            Id = 37,
                            Code = "CA",
                            IsActive = true,
                            Name = "Канада"
                        },
                        new
                        {
                            Id = 38,
                            Code = "CC",
                            IsActive = true,
                            Name = "Кокосовые острова"
                        },
                        new
                        {
                            Id = 39,
                            Code = "CD",
                            IsActive = true,
                            Name = "Конго - Киншаса"
                        },
                        new
                        {
                            Id = 40,
                            Code = "CF",
                            IsActive = true,
                            Name = "Центрально-Африканская Республика"
                        },
                        new
                        {
                            Id = 41,
                            Code = "CG",
                            IsActive = true,
                            Name = "Конго - Браззавиль"
                        },
                        new
                        {
                            Id = 42,
                            Code = "CH",
                            IsActive = true,
                            Name = "Швейцария"
                        },
                        new
                        {
                            Id = 43,
                            Code = "CI",
                            IsActive = true,
                            Name = "Кот-д'Ивуар"
                        },
                        new
                        {
                            Id = 44,
                            Code = "CK",
                            IsActive = true,
                            Name = "Острова Кука"
                        },
                        new
                        {
                            Id = 45,
                            Code = "CL",
                            IsActive = true,
                            Name = "Чили"
                        },
                        new
                        {
                            Id = 46,
                            Code = "CM",
                            IsActive = true,
                            Name = "Камерун"
                        },
                        new
                        {
                            Id = 47,
                            Code = "CN",
                            IsActive = true,
                            Name = "Китай"
                        },
                        new
                        {
                            Id = 48,
                            Code = "CO",
                            IsActive = true,
                            Name = "Колумбия"
                        },
                        new
                        {
                            Id = 49,
                            Code = "CR",
                            IsActive = true,
                            Name = "Коста-Рика"
                        },
                        new
                        {
                            Id = 50,
                            Code = "CU",
                            IsActive = true,
                            Name = "Куба"
                        },
                        new
                        {
                            Id = 51,
                            Code = "CV",
                            IsActive = true,
                            Name = "Кабо-Верде"
                        },
                        new
                        {
                            Id = 52,
                            Code = "CW",
                            IsActive = true,
                            Name = "Кюрасао"
                        },
                        new
                        {
                            Id = 53,
                            Code = "CX",
                            IsActive = true,
                            Name = "Остров Рождества"
                        },
                        new
                        {
                            Id = 54,
                            Code = "CY",
                            IsActive = true,
                            Name = "Кипр"
                        },
                        new
                        {
                            Id = 55,
                            Code = "CZ",
                            IsActive = true,
                            Name = "Чехия"
                        },
                        new
                        {
                            Id = 56,
                            Code = "DE",
                            IsActive = true,
                            Name = "Германия"
                        },
                        new
                        {
                            Id = 57,
                            Code = "DJ",
                            IsActive = true,
                            Name = "Джибути"
                        },
                        new
                        {
                            Id = 58,
                            Code = "DK",
                            IsActive = true,
                            Name = "Дания"
                        },
                        new
                        {
                            Id = 59,
                            Code = "DM",
                            IsActive = true,
                            Name = "Доминика"
                        },
                        new
                        {
                            Id = 60,
                            Code = "DO",
                            IsActive = true,
                            Name = "Доминиканская Республика"
                        },
                        new
                        {
                            Id = 61,
                            Code = "DZ",
                            IsActive = true,
                            Name = "Алжир"
                        },
                        new
                        {
                            Id = 62,
                            Code = "EC",
                            IsActive = true,
                            Name = "Эквадор"
                        },
                        new
                        {
                            Id = 63,
                            Code = "EE",
                            IsActive = true,
                            Name = "Эстония"
                        },
                        new
                        {
                            Id = 64,
                            Code = "EG",
                            IsActive = true,
                            Name = "Египет"
                        },
                        new
                        {
                            Id = 65,
                            Code = "EH",
                            IsActive = true,
                            Name = "Западная Сахара"
                        },
                        new
                        {
                            Id = 66,
                            Code = "ER",
                            IsActive = true,
                            Name = "Эритрея"
                        },
                        new
                        {
                            Id = 67,
                            Code = "ES",
                            IsActive = true,
                            Name = "Испания"
                        },
                        new
                        {
                            Id = 68,
                            Code = "ET",
                            IsActive = true,
                            Name = "Эфиопия"
                        },
                        new
                        {
                            Id = 69,
                            Code = "FI",
                            IsActive = true,
                            Name = "Финляндия"
                        },
                        new
                        {
                            Id = 70,
                            Code = "FJ",
                            IsActive = true,
                            Name = "Фиджи"
                        },
                        new
                        {
                            Id = 71,
                            Code = "FK",
                            IsActive = true,
                            Name = "Фолклендские (Мальвинские) острова"
                        },
                        new
                        {
                            Id = 72,
                            Code = "FM",
                            IsActive = true,
                            Name = "Федеративные Штаты Микронезии"
                        },
                        new
                        {
                            Id = 73,
                            Code = "FO",
                            IsActive = true,
                            Name = "Фарерские острова"
                        },
                        new
                        {
                            Id = 74,
                            Code = "FR",
                            IsActive = true,
                            Name = "Франция"
                        },
                        new
                        {
                            Id = 75,
                            Code = "GA",
                            IsActive = true,
                            Name = "Габон"
                        },
                        new
                        {
                            Id = 76,
                            Code = "GB",
                            IsActive = true,
                            Name = "Великобритания"
                        },
                        new
                        {
                            Id = 77,
                            Code = "GD",
                            IsActive = true,
                            Name = "Гренада"
                        },
                        new
                        {
                            Id = 78,
                            Code = "GE",
                            IsActive = true,
                            Name = "Грузия"
                        },
                        new
                        {
                            Id = 79,
                            Code = "GF",
                            IsActive = true,
                            Name = "Французская Гвиана"
                        },
                        new
                        {
                            Id = 80,
                            Code = "GG",
                            IsActive = true,
                            Name = "Гернси"
                        },
                        new
                        {
                            Id = 81,
                            Code = "GH",
                            IsActive = true,
                            Name = "Гана"
                        },
                        new
                        {
                            Id = 82,
                            Code = "GI",
                            IsActive = true,
                            Name = "Гибралтар"
                        },
                        new
                        {
                            Id = 83,
                            Code = "GL",
                            IsActive = true,
                            Name = "Гренландия"
                        },
                        new
                        {
                            Id = 84,
                            Code = "GM",
                            IsActive = true,
                            Name = "Гамбия"
                        },
                        new
                        {
                            Id = 85,
                            Code = "GN",
                            IsActive = true,
                            Name = "Гвинея"
                        },
                        new
                        {
                            Id = 86,
                            Code = "GP",
                            IsActive = true,
                            Name = "Гваделупа"
                        },
                        new
                        {
                            Id = 87,
                            Code = "GQ",
                            IsActive = true,
                            Name = "Экваториальная Гвинея"
                        },
                        new
                        {
                            Id = 88,
                            Code = "GR",
                            IsActive = true,
                            Name = "Греция"
                        },
                        new
                        {
                            Id = 89,
                            Code = "GT",
                            IsActive = true,
                            Name = "Гватемала"
                        },
                        new
                        {
                            Id = 90,
                            Code = "GU",
                            IsActive = true,
                            Name = "Гуам"
                        },
                        new
                        {
                            Id = 91,
                            Code = "GW",
                            IsActive = true,
                            Name = "Гвинея-Бисау"
                        },
                        new
                        {
                            Id = 92,
                            Code = "GY",
                            IsActive = true,
                            Name = "Гайана"
                        },
                        new
                        {
                            Id = 93,
                            Code = "HK",
                            IsActive = true,
                            Name = "Гонконг"
                        },
                        new
                        {
                            Id = 94,
                            Code = "HN",
                            IsActive = true,
                            Name = "Гондурас"
                        },
                        new
                        {
                            Id = 95,
                            Code = "HR",
                            IsActive = true,
                            Name = "Хорватия"
                        },
                        new
                        {
                            Id = 96,
                            Code = "HT",
                            IsActive = true,
                            Name = "Гаити"
                        },
                        new
                        {
                            Id = 97,
                            Code = "HU",
                            IsActive = true,
                            Name = "Венгрия"
                        },
                        new
                        {
                            Id = 98,
                            Code = "ID",
                            IsActive = true,
                            Name = "Индонезия"
                        },
                        new
                        {
                            Id = 99,
                            Code = "IE",
                            IsActive = true,
                            Name = "Ирландия"
                        },
                        new
                        {
                            Id = 100,
                            Code = "IL",
                            IsActive = true,
                            Name = "Израиль"
                        },
                        new
                        {
                            Id = 101,
                            Code = "IM",
                            IsActive = true,
                            Name = "Остров Мэн"
                        },
                        new
                        {
                            Id = 102,
                            Code = "IN",
                            IsActive = true,
                            Name = "Индия"
                        },
                        new
                        {
                            Id = 103,
                            Code = "IO",
                            IsActive = true,
                            Name = "Британская территория в Индийском океане"
                        },
                        new
                        {
                            Id = 104,
                            Code = "IQ",
                            IsActive = true,
                            Name = "Ирак"
                        },
                        new
                        {
                            Id = 105,
                            Code = "IR",
                            IsActive = true,
                            Name = "Иран"
                        },
                        new
                        {
                            Id = 106,
                            Code = "IS",
                            IsActive = true,
                            Name = "Исландия"
                        },
                        new
                        {
                            Id = 107,
                            Code = "IT",
                            IsActive = true,
                            Name = "Италия"
                        },
                        new
                        {
                            Id = 108,
                            Code = "JE",
                            IsActive = true,
                            Name = "Джерси"
                        },
                        new
                        {
                            Id = 109,
                            Code = "JM",
                            IsActive = true,
                            Name = "Ямайка"
                        },
                        new
                        {
                            Id = 110,
                            Code = "JO",
                            IsActive = true,
                            Name = "Иордания"
                        },
                        new
                        {
                            Id = 111,
                            Code = "JP",
                            IsActive = true,
                            Name = "Япония"
                        },
                        new
                        {
                            Id = 112,
                            Code = "KE",
                            IsActive = true,
                            Name = "Кения"
                        },
                        new
                        {
                            Id = 113,
                            Code = "KG",
                            IsActive = true,
                            Name = "Киргизия"
                        },
                        new
                        {
                            Id = 114,
                            Code = "KH",
                            IsActive = true,
                            Name = "Камбоджа"
                        },
                        new
                        {
                            Id = 115,
                            Code = "KI",
                            IsActive = true,
                            Name = "Кирибати"
                        },
                        new
                        {
                            Id = 116,
                            Code = "KM",
                            IsActive = true,
                            Name = "Коморы"
                        },
                        new
                        {
                            Id = 117,
                            Code = "KN",
                            IsActive = true,
                            Name = "Сент-Китс и Невис"
                        },
                        new
                        {
                            Id = 118,
                            Code = "KP",
                            IsActive = true,
                            Name = "КНДР"
                        },
                        new
                        {
                            Id = 119,
                            Code = "KR",
                            IsActive = true,
                            Name = "Республика Корея"
                        },
                        new
                        {
                            Id = 120,
                            Code = "KW",
                            IsActive = true,
                            Name = "Кувейт"
                        },
                        new
                        {
                            Id = 121,
                            Code = "KY",
                            IsActive = true,
                            Name = "Острова Кайман"
                        },
                        new
                        {
                            Id = 122,
                            Code = "KZ",
                            IsActive = true,
                            Name = "Казахстан"
                        },
                        new
                        {
                            Id = 123,
                            Code = "LA",
                            IsActive = true,
                            Name = "Лаос"
                        },
                        new
                        {
                            Id = 124,
                            Code = "LB",
                            IsActive = true,
                            Name = "Ливан"
                        },
                        new
                        {
                            Id = 125,
                            Code = "LC",
                            IsActive = true,
                            Name = "Сент-Люсия"
                        },
                        new
                        {
                            Id = 126,
                            Code = "LI",
                            IsActive = true,
                            Name = "Лихтенштейн"
                        },
                        new
                        {
                            Id = 127,
                            Code = "LK",
                            IsActive = true,
                            Name = "Шри-Ланка"
                        },
                        new
                        {
                            Id = 128,
                            Code = "LR",
                            IsActive = true,
                            Name = "Либерия"
                        },
                        new
                        {
                            Id = 129,
                            Code = "LS",
                            IsActive = true,
                            Name = "Лесото"
                        },
                        new
                        {
                            Id = 130,
                            Code = "LT",
                            IsActive = true,
                            Name = "Литва"
                        },
                        new
                        {
                            Id = 131,
                            Code = "LU",
                            IsActive = true,
                            Name = "Люксембург"
                        },
                        new
                        {
                            Id = 132,
                            Code = "LV",
                            IsActive = true,
                            Name = "Латвия"
                        },
                        new
                        {
                            Id = 133,
                            Code = "LY",
                            IsActive = true,
                            Name = "Ливия"
                        },
                        new
                        {
                            Id = 134,
                            Code = "MA",
                            IsActive = true,
                            Name = "Марокко"
                        },
                        new
                        {
                            Id = 135,
                            Code = "MC",
                            IsActive = true,
                            Name = "Монако"
                        },
                        new
                        {
                            Id = 136,
                            Code = "MD",
                            IsActive = true,
                            Name = "Молдова"
                        },
                        new
                        {
                            Id = 137,
                            Code = "ME",
                            IsActive = true,
                            Name = "Черногория"
                        },
                        new
                        {
                            Id = 138,
                            Code = "MF",
                            IsActive = true,
                            Name = "Сен-Мартен"
                        },
                        new
                        {
                            Id = 139,
                            Code = "MG",
                            IsActive = true,
                            Name = "Мадагаскар"
                        },
                        new
                        {
                            Id = 140,
                            Code = "MH",
                            IsActive = true,
                            Name = "Маршалловы острова"
                        },
                        new
                        {
                            Id = 141,
                            Code = "MK",
                            IsActive = true,
                            Name = "Северная Македония"
                        },
                        new
                        {
                            Id = 142,
                            Code = "ML",
                            IsActive = true,
                            Name = "Мали"
                        },
                        new
                        {
                            Id = 143,
                            Code = "MM",
                            IsActive = true,
                            Name = "Мьянма (Бирма)"
                        },
                        new
                        {
                            Id = 144,
                            Code = "MN",
                            IsActive = true,
                            Name = "Монголия"
                        },
                        new
                        {
                            Id = 145,
                            Code = "MO",
                            IsActive = true,
                            Name = "Макао"
                        },
                        new
                        {
                            Id = 146,
                            Code = "MP",
                            IsActive = true,
                            Name = "Северные Марианские острова"
                        },
                        new
                        {
                            Id = 147,
                            Code = "MQ",
                            IsActive = true,
                            Name = "Мартиника"
                        },
                        new
                        {
                            Id = 148,
                            Code = "MR",
                            IsActive = true,
                            Name = "Мавритания"
                        },
                        new
                        {
                            Id = 149,
                            Code = "MS",
                            IsActive = true,
                            Name = "Монтсеррат"
                        },
                        new
                        {
                            Id = 150,
                            Code = "MT",
                            IsActive = true,
                            Name = "Мальта"
                        },
                        new
                        {
                            Id = 151,
                            Code = "MU",
                            IsActive = true,
                            Name = "Маврикий"
                        },
                        new
                        {
                            Id = 152,
                            Code = "MV",
                            IsActive = true,
                            Name = "Мальдивы"
                        },
                        new
                        {
                            Id = 153,
                            Code = "MW",
                            IsActive = true,
                            Name = "Малави"
                        },
                        new
                        {
                            Id = 154,
                            Code = "MX",
                            IsActive = true,
                            Name = "Мексика"
                        },
                        new
                        {
                            Id = 155,
                            Code = "MY",
                            IsActive = true,
                            Name = "Малайзия"
                        },
                        new
                        {
                            Id = 156,
                            Code = "MZ",
                            IsActive = true,
                            Name = "Мозамбик"
                        },
                        new
                        {
                            Id = 157,
                            Code = "NA",
                            IsActive = true,
                            Name = "Намибия"
                        },
                        new
                        {
                            Id = 158,
                            Code = "NC",
                            IsActive = true,
                            Name = "Новая Каледония"
                        },
                        new
                        {
                            Id = 159,
                            Code = "NE",
                            IsActive = true,
                            Name = "Нигер"
                        },
                        new
                        {
                            Id = 160,
                            Code = "NF",
                            IsActive = true,
                            Name = "Остров Норфолк"
                        },
                        new
                        {
                            Id = 161,
                            Code = "NG",
                            IsActive = true,
                            Name = "Нигерия"
                        },
                        new
                        {
                            Id = 162,
                            Code = "NI",
                            IsActive = true,
                            Name = "Никарагуа"
                        },
                        new
                        {
                            Id = 163,
                            Code = "NL",
                            IsActive = true,
                            Name = "Нидерланды"
                        },
                        new
                        {
                            Id = 164,
                            Code = "NO",
                            IsActive = true,
                            Name = "Норвегия"
                        },
                        new
                        {
                            Id = 165,
                            Code = "NP",
                            IsActive = true,
                            Name = "Непал"
                        },
                        new
                        {
                            Id = 166,
                            Code = "NR",
                            IsActive = true,
                            Name = "Науру"
                        },
                        new
                        {
                            Id = 167,
                            Code = "NU",
                            IsActive = true,
                            Name = "Ниуэ"
                        },
                        new
                        {
                            Id = 168,
                            Code = "NZ",
                            IsActive = true,
                            Name = "Новая Зеландия"
                        },
                        new
                        {
                            Id = 169,
                            Code = "OM",
                            IsActive = true,
                            Name = "Оман"
                        },
                        new
                        {
                            Id = 170,
                            Code = "PA",
                            IsActive = true,
                            Name = "Панама"
                        },
                        new
                        {
                            Id = 171,
                            Code = "PE",
                            IsActive = true,
                            Name = "Перу"
                        },
                        new
                        {
                            Id = 172,
                            Code = "PF",
                            IsActive = true,
                            Name = "Французская Полинезия"
                        },
                        new
                        {
                            Id = 173,
                            Code = "PG",
                            IsActive = true,
                            Name = "Папуа - Новая Гвинея"
                        },
                        new
                        {
                            Id = 174,
                            Code = "PH",
                            IsActive = true,
                            Name = "Филиппины"
                        },
                        new
                        {
                            Id = 175,
                            Code = "PK",
                            IsActive = true,
                            Name = "Пакистан"
                        },
                        new
                        {
                            Id = 176,
                            Code = "PL",
                            IsActive = true,
                            Name = "Польша"
                        },
                        new
                        {
                            Id = 177,
                            Code = "PM",
                            IsActive = true,
                            Name = "Сен-Пьер и Микелон"
                        },
                        new
                        {
                            Id = 178,
                            Code = "PR",
                            IsActive = true,
                            Name = "Пуэрто-Рико"
                        },
                        new
                        {
                            Id = 179,
                            Code = "PS",
                            IsActive = true,
                            Name = "Палестина"
                        },
                        new
                        {
                            Id = 180,
                            Code = "PT",
                            IsActive = true,
                            Name = "Португалия"
                        },
                        new
                        {
                            Id = 181,
                            Code = "PW",
                            IsActive = true,
                            Name = "Палау"
                        },
                        new
                        {
                            Id = 182,
                            Code = "PY",
                            IsActive = true,
                            Name = "Парагвай"
                        },
                        new
                        {
                            Id = 183,
                            Code = "QA",
                            IsActive = true,
                            Name = "Катар"
                        },
                        new
                        {
                            Id = 184,
                            Code = "RE",
                            IsActive = true,
                            Name = "Реюньон"
                        },
                        new
                        {
                            Id = 185,
                            Code = "RO",
                            IsActive = true,
                            Name = "Румыния"
                        },
                        new
                        {
                            Id = 186,
                            Code = "RS",
                            IsActive = true,
                            Name = "Сербия"
                        },
                        new
                        {
                            Id = 187,
                            Code = "RU",
                            IsActive = true,
                            Name = "Россия"
                        },
                        new
                        {
                            Id = 188,
                            Code = "RW",
                            IsActive = true,
                            Name = "Руанда"
                        },
                        new
                        {
                            Id = 189,
                            Code = "SA",
                            IsActive = true,
                            Name = "Саудовская Аравия"
                        },
                        new
                        {
                            Id = 190,
                            Code = "SB",
                            IsActive = true,
                            Name = "Соломоновы острова"
                        },
                        new
                        {
                            Id = 191,
                            Code = "SC",
                            IsActive = true,
                            Name = "Сейшельские острова"
                        },
                        new
                        {
                            Id = 192,
                            Code = "SD",
                            IsActive = true,
                            Name = "Судан"
                        },
                        new
                        {
                            Id = 193,
                            Code = "SE",
                            IsActive = true,
                            Name = "Швеция"
                        },
                        new
                        {
                            Id = 194,
                            Code = "SG",
                            IsActive = true,
                            Name = "Сингапур"
                        },
                        new
                        {
                            Id = 195,
                            Code = "SH",
                            IsActive = true,
                            Name = "Остров Святой Елены"
                        },
                        new
                        {
                            Id = 196,
                            Code = "SI",
                            IsActive = true,
                            Name = "Словения"
                        },
                        new
                        {
                            Id = 197,
                            Code = "SJ",
                            IsActive = true,
                            Name = "Шпицберген и Ян-Майен"
                        },
                        new
                        {
                            Id = 198,
                            Code = "SK",
                            IsActive = true,
                            Name = "Словакия"
                        },
                        new
                        {
                            Id = 199,
                            Code = "SL",
                            IsActive = true,
                            Name = "Сьерра-Леоне"
                        },
                        new
                        {
                            Id = 200,
                            Code = "SM",
                            IsActive = true,
                            Name = "Сан-Марино"
                        },
                        new
                        {
                            Id = 201,
                            Code = "SN",
                            IsActive = true,
                            Name = "Сенегал"
                        },
                        new
                        {
                            Id = 202,
                            Code = "SO",
                            IsActive = true,
                            Name = "Сомали"
                        },
                        new
                        {
                            Id = 203,
                            Code = "SR",
                            IsActive = true,
                            Name = "Суринам"
                        },
                        new
                        {
                            Id = 204,
                            Code = "SS",
                            IsActive = true,
                            Name = "Южный Судан"
                        },
                        new
                        {
                            Id = 205,
                            Code = "ST",
                            IsActive = true,
                            Name = "Сан-Томе и Принсипи"
                        },
                        new
                        {
                            Id = 206,
                            Code = "SV",
                            IsActive = true,
                            Name = "Сальвадор"
                        },
                        new
                        {
                            Id = 207,
                            Code = "SX",
                            IsActive = true,
                            Name = "Синт-Мартен"
                        },
                        new
                        {
                            Id = 208,
                            Code = "SY",
                            IsActive = true,
                            Name = "Сирия"
                        },
                        new
                        {
                            Id = 209,
                            Code = "SZ",
                            IsActive = true,
                            Name = "Эсватини"
                        },
                        new
                        {
                            Id = 210,
                            Code = "TC",
                            IsActive = true,
                            Name = "Тёркс и Кайкос"
                        },
                        new
                        {
                            Id = 211,
                            Code = "TD",
                            IsActive = true,
                            Name = "Чад"
                        },
                        new
                        {
                            Id = 212,
                            Code = "TG",
                            IsActive = true,
                            Name = "Того"
                        },
                        new
                        {
                            Id = 213,
                            Code = "TH",
                            IsActive = true,
                            Name = "Таиланд"
                        },
                        new
                        {
                            Id = 214,
                            Code = "TJ",
                            IsActive = true,
                            Name = "Таджикистан"
                        },
                        new
                        {
                            Id = 215,
                            Code = "TK",
                            IsActive = true,
                            Name = "Токелау"
                        },
                        new
                        {
                            Id = 216,
                            Code = "TL",
                            IsActive = true,
                            Name = "Восточный Тимор"
                        },
                        new
                        {
                            Id = 217,
                            Code = "TM",
                            IsActive = true,
                            Name = "Туркменистан"
                        },
                        new
                        {
                            Id = 218,
                            Code = "TN",
                            IsActive = true,
                            Name = "Тунис"
                        },
                        new
                        {
                            Id = 219,
                            Code = "TO",
                            IsActive = true,
                            Name = "Тонга"
                        },
                        new
                        {
                            Id = 220,
                            Code = "TR",
                            IsActive = true,
                            Name = "Турция"
                        },
                        new
                        {
                            Id = 221,
                            Code = "TT",
                            IsActive = true,
                            Name = "Тринидад и Тобаго"
                        },
                        new
                        {
                            Id = 222,
                            Code = "TV",
                            IsActive = true,
                            Name = "Тувалу"
                        },
                        new
                        {
                            Id = 223,
                            Code = "TW",
                            IsActive = true,
                            Name = "Тайвань"
                        },
                        new
                        {
                            Id = 224,
                            Code = "TZ",
                            IsActive = true,
                            Name = "Танзания"
                        },
                        new
                        {
                            Id = 225,
                            Code = "UA",
                            IsActive = true,
                            Name = "Украина"
                        },
                        new
                        {
                            Id = 226,
                            Code = "UG",
                            IsActive = true,
                            Name = "Уганда"
                        },
                        new
                        {
                            Id = 227,
                            Code = "US",
                            IsActive = true,
                            Name = "Соединенные Штаты"
                        },
                        new
                        {
                            Id = 228,
                            Code = "UY",
                            IsActive = true,
                            Name = "Уругвай"
                        },
                        new
                        {
                            Id = 229,
                            Code = "UZ",
                            IsActive = true,
                            Name = "Узбекистан"
                        },
                        new
                        {
                            Id = 230,
                            Code = "VA",
                            IsActive = true,
                            Name = "Ватикан"
                        },
                        new
                        {
                            Id = 231,
                            Code = "VC",
                            IsActive = true,
                            Name = "Сент-Винсент и Гренадины"
                        },
                        new
                        {
                            Id = 232,
                            Code = "VE",
                            IsActive = true,
                            Name = "Венесуэла"
                        },
                        new
                        {
                            Id = 233,
                            Code = "VG",
                            IsActive = true,
                            Name = "Виргинские острова (Великобритания)"
                        },
                        new
                        {
                            Id = 234,
                            Code = "VI",
                            IsActive = true,
                            Name = "Виргинские острова (США)"
                        },
                        new
                        {
                            Id = 235,
                            Code = "VN",
                            IsActive = true,
                            Name = "Вьетнам"
                        },
                        new
                        {
                            Id = 236,
                            Code = "VU",
                            IsActive = true,
                            Name = "Вануату"
                        },
                        new
                        {
                            Id = 237,
                            Code = "WF",
                            IsActive = true,
                            Name = "Уоллис и Футуна"
                        },
                        new
                        {
                            Id = 238,
                            Code = "WS",
                            IsActive = true,
                            Name = "Самоа"
                        },
                        new
                        {
                            Id = 239,
                            Code = "XK",
                            IsActive = true,
                            Name = "Косово"
                        },
                        new
                        {
                            Id = 240,
                            Code = "YE",
                            IsActive = true,
                            Name = "Йемен"
                        },
                        new
                        {
                            Id = 241,
                            Code = "YT",
                            IsActive = true,
                            Name = "Майотта"
                        },
                        new
                        {
                            Id = 242,
                            Code = "ZA",
                            IsActive = true,
                            Name = "Южно-Африканская Республика"
                        },
                        new
                        {
                            Id = 243,
                            Code = "ZM",
                            IsActive = true,
                            Name = "Замбия"
                        },
                        new
                        {
                            Id = 244,
                            Code = "ZW",
                            IsActive = true,
                            Name = "Зимбабве"
                        });
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.ExternalSource", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_external_source");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_external_source_code");

                    b.ToTable("external_source", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "azure_ad",
                            Name = "Azure AD"
                        });
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("display_name");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permission");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_permission_group_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permission_name");

                    b.ToTable("permission", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.PermissionGrant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<Guid>("DestinationUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("destination_user_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Reason")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("reason");

                    b.Property<Guid>("SourceUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_user_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_permission_grant");

                    b.HasIndex("DestinationUserId")
                        .HasDatabaseName("ix_permission_grant_destination_user_id");

                    b.HasIndex("SourceUserId")
                        .HasDatabaseName("ix_permission_grant_source_user_id");

                    b.ToTable("permission_grant", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.PermissionGrantPermission", b =>
                {
                    b.Property<Guid>("PermissionGrantId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_grant_id");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.HasKey("PermissionGrantId", "PermissionId")
                        .HasName("pk_permission_grant_permission");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_permission_grant_permission_permission_id");

                    b.ToTable("permission_grant_permission", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permission_group");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permission_group_name");

                    b.ToTable("permission_group", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_role_code")
                        .HasFilter("tenant_id IS NULL");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("tenant_id IS NULL");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_role_tenant_id");

                    b.HasIndex("Code", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_role_code_tenant_id");

                    b.HasIndex("NormalizedName", "TenantId")
                        .IsUnique()
                        .HasDatabaseName("ix_role_normalized_name_tenant_id");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permission");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permission_permission_id");

                    b.ToTable("role_permission", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.ScopePermission", b =>
                {
                    b.Property<int>("ScopeId")
                        .HasColumnType("integer")
                        .HasColumnName("scope_id");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.HasKey("ScopeId", "PermissionId")
                        .HasName("pk_scope_permission");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_scope_permission_permission_id");

                    b.ToTable("scope_permission", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.SigningKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_signing_key");

                    b.ToTable("signing_key", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tenant");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_tenant_code");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_tenant_name");

                    b.ToTable("tenant", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.TenantUser", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("tenant_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("TenantId", "UserId")
                        .HasName("pk_tenant_user");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tenant_user_user_id");

                    b.ToTable("tenant_user", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.UsedUserPassword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_used_user_password");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_used_user_password_user_id");

                    b.ToTable("used_user_password", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<DateTime?>("AgreementAcceptedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("agreement_accepted_date");

                    b.Property<string>("BlockReason")
                        .HasColumnType("text")
                        .HasColumnName("block_reason");

                    b.Property<DateTime?>("BlockedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("blocked_date");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text")
                        .HasColumnName("external_id");

                    b.Property<byte?>("ExternalSourceId")
                        .HasColumnType("smallint")
                        .HasColumnName("external_source_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_admin");

                    b.Property<bool>("IsAgreementAcceptanceRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_agreement_acceptance_required");

                    b.Property<bool>("IsAuthenticatorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_authenticator_enabled");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blocked");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("middle_name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("ReferralCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("referral_code");

                    b.Property<Guid?>("ReferrerUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("referrer_user_id");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<int>("SerialNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("serial_number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SerialNumber"));

                    b.Property<byte>("StatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("status_id");

                    b.Property<string>("TelegramLogin")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telegram_login");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<byte?>("TypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("type_id");

                    b.Property<string>("UnconfirmedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("unconfirmed_email");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_external_id");

                    b.HasIndex("ExternalSourceId")
                        .HasDatabaseName("ix_user_external_source_id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ReferralCode")
                        .IsUnique()
                        .HasDatabaseName("ix_user_referral_code");

                    b.HasIndex("ReferrerUserId")
                        .HasDatabaseName("ix_user_referrer_user_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_user_status_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_user_type_id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.UserEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BlockEndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("block_end_date");

                    b.Property<DateTime>("EventDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("event_date")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("EventKind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event_kind");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_events");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_events_user_id");

                    b.ToTable("user_events", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_role");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_role_id");

                    b.ToTable("user_role", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.UserStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_status");

                    b.ToTable("user_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Запрос на подключение"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Активный"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Заблокированный"
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "Удалённый"
                        });
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.UserType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_type");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_user_type_code");

                    b.ToTable("user_type", (string)null);
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_resource_claim_api_resources_api_resource_id");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Properties")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_resource_property_api_resources_api_resource_id");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceScope", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Scopes")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_resource_scope_api_resources_api_resource_id");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResourceSecret", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiResource", "ApiResource")
                        .WithMany("Secrets")
                        .HasForeignKey("ApiResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_resource_secret_api_resources_api_resource_id");

                    b.Navigation("ApiResource");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiScope", "Scope")
                        .WithMany("UserClaims")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_scope_claim_api_scopes_scope_id");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScopeProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiScope", "Scope")
                        .WithMany("Properties")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_api_scope_property_api_scopes_scope_id");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("Claims")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_claim_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientCorsOrigin", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedCorsOrigins")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_cors_origin_client_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientGrantType", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedGrantTypes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_grant_type_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientIdPRestriction", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("IdentityProviderRestrictions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_id_p_restriction_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientPostLogoutRedirectUri", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("PostLogoutRedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_post_logout_redirect_uri_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("Properties")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_property_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientRedirectUri", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("RedirectUris")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_redirect_uri_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientScope", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("AllowedScopes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_scope_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ClientSecret", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.Client", "Client")
                        .WithMany("ClientSecrets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_client_secret_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceClaim", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityResource", "IdentityResource")
                        .WithMany("UserClaims")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_resource_claim_identity_resources_identity_resourc");

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResourceProperty", b =>
                {
                    b.HasOne("IdentityServer4.EntityFramework.Entities.IdentityResource", "IdentityResource")
                        .WithMany("Properties")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_identity_resource_property_identity_resources_identity_reso");

                    b.Navigation("IdentityResource");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claim_role_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claim_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_login_user_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_token_user_user_id");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.Account", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.Account", "Parent")
                        .WithMany("SubAccounts")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_account_account_parent_id");

                    b.HasOne("RRMonitoring.Identity.Domain.Entities.User", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_account_user_user_id");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.Permission", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.PermissionGroup", "Group")
                        .WithMany("Permissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_permission_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.PermissionGrant", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.User", "DestinationUser")
                        .WithMany()
                        .HasForeignKey("DestinationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_grant_user_destination_user_id");

                    b.HasOne("RRMonitoring.Identity.Domain.Entities.User", "SourceUser")
                        .WithMany()
                        .HasForeignKey("SourceUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_grant_user_source_user_id");

                    b.Navigation("DestinationUser");

                    b.Navigation("SourceUser");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.PermissionGrantPermission", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.PermissionGrant", "PermissionGrant")
                        .WithMany("GrantedPermissions")
                        .HasForeignKey("PermissionGrantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_grant_permission_permission_grant_permission_gra");

                    b.HasOne("RRMonitoring.Identity.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_grant_permission_permission_permission_id");

                    b.Navigation("Permission");

                    b.Navigation("PermissionGrant");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.Role", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .HasConstraintName("fk_role_tenant_tenant_id");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_permission_permission_id");

                    b.HasOne("RRMonitoring.Identity.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.ScopePermission", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_scope_permission_permission_permission_id");

                    b.HasOne("IdentityServer4.EntityFramework.Entities.ApiScope", "Scope")
                        .WithMany()
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_scope_permission_api_scope_scope_id");

                    b.Navigation("Permission");

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.TenantUser", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_user_tenant_tenant_id");

                    b.HasOne("RRMonitoring.Identity.Domain.Entities.User", "User")
                        .WithMany("UserTenants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tenant_user_users_user_id");

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.UsedUserPassword", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.User", "User")
                        .WithMany("UsedPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_used_user_password_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.User", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.ExternalSource", "ExternalSource")
                        .WithMany()
                        .HasForeignKey("ExternalSourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_external_source_external_source_id");

                    b.HasOne("RRMonitoring.Identity.Domain.Entities.User", "ReferrerUser")
                        .WithMany()
                        .HasForeignKey("ReferrerUserId")
                        .HasConstraintName("fk_user_user_referrer_user_id");

                    b.HasOne("RRMonitoring.Identity.Domain.Entities.UserStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_user_status_status_id");

                    b.HasOne("RRMonitoring.Identity.Domain.Entities.UserType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_user_type_type_id");

                    b.Navigation("ExternalSource");

                    b.Navigation("ReferrerUser");

                    b.Navigation("Status");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.UserEvent", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_events_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("RRMonitoring.Identity.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_asp_net_roles_role_id");

                    b.HasOne("RRMonitoring.Identity.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_user_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiResource", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Scopes");

                    b.Navigation("Secrets");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.ApiScope", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.Client", b =>
                {
                    b.Navigation("AllowedCorsOrigins");

                    b.Navigation("AllowedGrantTypes");

                    b.Navigation("AllowedScopes");

                    b.Navigation("Claims");

                    b.Navigation("ClientSecrets");

                    b.Navigation("IdentityProviderRestrictions");

                    b.Navigation("PostLogoutRedirectUris");

                    b.Navigation("Properties");

                    b.Navigation("RedirectUris");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.IdentityResource", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("UserClaims");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.Account", b =>
                {
                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.PermissionGrant", b =>
                {
                    b.Navigation("GrantedPermissions");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RRMonitoring.Identity.Domain.Entities.User", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("UsedPasswords");

                    b.Navigation("UserEvents");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTenants");
                });
#pragma warning restore 612, 618
        }
    }
}
