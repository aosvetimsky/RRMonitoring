// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RRMonitoring.Notification.Infrastructure.Database;

#nullable disable

namespace RRMonitoring.Notification.Infrastructure.Migrations
{
    [DbContext(typeof(NotificationContext))]
    [Migration("20220905103100_RemovedNotificationIdConstraint")]
    partial class RemovedNotificationIdConstraint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.Channel", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_channel");

                    b.ToTable("channel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Email"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Push"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Sms"
                        });
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("identifier");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_notification");

                    b.HasAlternateKey("Identifier")
                        .HasName("ak_notification_identifier");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_notification_identifier");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_notification_type_id");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.NotificationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_notification_group");

                    b.ToTable("notification_group", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.NotificationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte>("ChannelId")
                        .HasColumnType("smallint")
                        .HasColumnName("channel_id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ErrorText")
                        .HasColumnType("text")
                        .HasColumnName("error_text");

                    b.Property<string>("ExternalMessageId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_message_id");

                    b.Property<string>("ExternalSystemStatus")
                        .HasColumnType("text")
                        .HasColumnName("external_system_status");

                    b.Property<string>("NotificationBody")
                        .HasColumnType("text")
                        .HasColumnName("notification_body");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<string>("RecipientAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipient_address");

                    b.Property<string>("RecipientId")
                        .HasColumnType("text")
                        .HasColumnName("recipient_id");

                    b.Property<byte>("StatusId")
                        .HasColumnType("smallint")
                        .HasColumnName("status_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_notification_history");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_notification_history_channel_id");

                    b.HasIndex("NotificationId")
                        .HasDatabaseName("ix_notification_history_notification_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_notification_history_status_id");

                    b.ToTable("notification_history", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.NotificationPushHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date");

                    b.Property<string>("ExternalMessageId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("external_message_id");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("NotificationBody")
                        .HasColumnType("text")
                        .HasColumnName("notification_body");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipient_id");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date");

                    b.HasKey("Id")
                        .HasName("pk_notification_push_history");

                    b.HasIndex("NotificationId")
                        .HasDatabaseName("ix_notification_push_history_notification_id");

                    b.ToTable("notification_push_history", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_notification_type");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_notification_type_group_id");

                    b.ToTable("notification_type", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.PushRegisteredDevice", b =>
                {
                    b.Property<string>("RecipientId")
                        .HasColumnType("text")
                        .HasColumnName("recipient_id");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("RecipientId", "DeviceId")
                        .HasName("pk_push_registered_device");

                    b.ToTable("push_registered_device", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.RecipientSetting", b =>
                {
                    b.Property<string>("RecipientId")
                        .HasColumnType("text")
                        .HasColumnName("recipient_id");

                    b.Property<byte>("ChannelId")
                        .HasColumnType("smallint")
                        .HasColumnName("channel_id");

                    b.Property<string>("NotificationIdentifier")
                        .HasColumnType("character varying(250)")
                        .HasColumnName("notification_identifier");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.HasKey("RecipientId", "ChannelId", "NotificationIdentifier")
                        .HasName("pk_recipient_setting");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("ix_recipient_setting_channel_id");

                    b.HasIndex("NotificationIdentifier")
                        .HasDatabaseName("ix_recipient_setting_notification_identifier");

                    b.ToTable("recipient_setting", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.Status", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_status");

                    b.ToTable("status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "queued"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "delivered"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "failed"
                        });
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte>("ChannelId")
                        .HasColumnType("smallint")
                        .HasColumnName("channel_id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.HasKey("Id")
                        .HasName("pk_template");

                    b.HasIndex("NotificationId")
                        .HasDatabaseName("ix_template_notification_id");

                    b.HasIndex("ChannelId", "NotificationId")
                        .IsUnique()
                        .HasDatabaseName("ix_channel_notification");

                    b.ToTable("template", (string)null);
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.Notification", b =>
                {
                    b.HasOne("RRMonitoring.Notification.Domain.Entities.NotificationType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_notification_type_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.NotificationHistory", b =>
                {
                    b.HasOne("RRMonitoring.Notification.Domain.Entities.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_history_channel_channel_id");

                    b.HasOne("RRMonitoring.Notification.Domain.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_history_notification_notification_id");

                    b.HasOne("RRMonitoring.Notification.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_history_status_status_id");

                    b.Navigation("Channel");

                    b.Navigation("Notification");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.NotificationPushHistory", b =>
                {
                    b.HasOne("RRMonitoring.Notification.Domain.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_push_history_notification_notification_id");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.NotificationType", b =>
                {
                    b.HasOne("RRMonitoring.Notification.Domain.Entities.NotificationGroup", "Group")
                        .WithMany("Types")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_type_notification_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.RecipientSetting", b =>
                {
                    b.HasOne("RRMonitoring.Notification.Domain.Entities.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_recipient_setting_channel_channel_id");

                    b.HasOne("RRMonitoring.Notification.Domain.Entities.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationIdentifier")
                        .HasPrincipalKey("Identifier")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_recipient_setting_notification_notification_id");

                    b.Navigation("Channel");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.Template", b =>
                {
                    b.HasOne("RRMonitoring.Notification.Domain.Entities.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_channel_channel_id");

                    b.HasOne("RRMonitoring.Notification.Domain.Entities.Notification", "Notification")
                        .WithMany("Templates")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_template_notification_notification_id");

                    b.Navigation("Channel");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.Notification", b =>
                {
                    b.Navigation("Templates");
                });

            modelBuilder.Entity("RRMonitoring.Notification.Domain.Entities.NotificationGroup", b =>
                {
                    b.Navigation("Types");
                });
#pragma warning restore 612, 618
        }
    }
}
